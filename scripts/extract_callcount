#!/usr/bin/env python3

import sys
import re
import argparse

parser = argparse.ArgumentParser(description="Extract number of times a function was called from a callgrind file")
parser.add_argument("callgrind_file", help="path to profling data created by 'valgrind --tool=callgrind'")
parser.add_argument("search_patterns", help="pattern to search for in file (e.g. 'realizeDynamics')", nargs='+')
parser.add_argument("--separator", help="output separator. Output is emitted as ${FUNCTION_NAME}${SEPARATOR}${CALL_COUNT}", default="~")

args = parser.parse_args()

patts = [
    re.compile(f"^c?fn=.+{patt}")
    for patt in args.search_patterns
]

calls_patt = re.compile("^calls=(\d+)")
next_fn_patt = re.compile("^fn=")
FIND_FN_ST = 0
FIND_CALLS_ST = 1
state = FIND_FN_ST
sep = args.separator

with open(args.callgrind_file, "rt") as fd:
    for line in fd:
        line = line.strip()
        if state == FIND_FN_ST:
            for patt in patts:
                m = re.search(patt, line)
                if m:
                    lhs, rhs = line.split(" ", maxsplit=1)
                    print(rhs, end='')
                    state = FIND_CALLS_ST
        elif state == FIND_CALLS_ST:
            m = re.search(calls_patt, line)
            if m:
                num_calls = m.group(1)
                print(f"{sep}{num_calls}")
                state = FIND_FN_ST  # there may be more matches
            
            m2 = re.search(next_fn_patt, line)
            if m2:
                print(f"{sep}CALLCOUNT_NOT_FOUND")
                state = FIND_FN_ST
