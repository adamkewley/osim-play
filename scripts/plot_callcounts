#!/usr/bin/env python3

# plot a comparison between simbody and opensim backend function call
# counts, as recorded in a delimited file with the following format:
#
# function_name~call_count
#
# e.g: "System::realizeDynamics()~10"
#
# which can be generated by the `extract_callcount` script. Callers
# should provide two files. One for simbody's function call counts,
# one for opensim.

import pandas
import matplotlib
import matplotlib.pyplot as plt
import argparse

p = argparse.ArgumentParser(description="compare call count of function calls")
p.add_argument("simbody_calls", help="delimited file of ${FUNCTION}~${NUM_CALLS} for simbody")
p.add_argument("opensim_calls", help="delimited file of ${FUNCTION}~${NUM_CALLS} for opensim")
p.add_argument("--separator", help="record separator. Expected line format is ${FUNCTION}${SEP}${NUM_CALLS}", default="~")
p.add_argument("-o", "--output", help="save plot image to specified path (default: show it, rather than saving it)")

args = p.parse_args()

dfa = pandas.read_csv(
    args.simbody_calls,
    sep=args.separator,
    header=None,
    names=["func", "simbody cables"]
)
dfb = pandas.read_csv(
    args.opensim_calls,
    sep=args.separator,
    header=None,
    names=["func", "opensim"]
)

# join both call count files together
df = dfa.set_index("func").join(dfb.set_index("func"), how='inner')

fig = plt.figure(figsize=(10,4))
ax = plt.axes()
df.plot(ax=ax, kind="barh")
ax.set_ylabel("Function name")
ax.set_xlabel("Number of Calls")
ax.set_title("Number of function calls for each backend")
plt.tight_layout()

if args.output:
    plt.savefig(fname=args.output)
else:
    plt.show()

plt.close()
